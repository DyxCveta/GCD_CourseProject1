image(d2)
imgs <- c()
for(i in 0:9){ imgs[i] = data.mean(data,i) }
imgs <- c([],[],[],[],[],[],[],[],[],[])
imgs <- c()
for(i in 0:9){ imgs = c(imgs,data.mean(data,i) }
for(i in 0:9){ imgs = c(imgs,data.mean(data,i)) }
image(imgs(1))
image(imgs[1])
imgs[1]
imgs <- data.frame()
imgs[1]
d3 <- data.mean(data,3)
d4 <- data.mean(data,4)
d5 <- data.mean(data,5)
d6 <- data.mean(data,6)
d7 <- data.mean(data,7)
d8 <- data.mean(data,8)
d9 <- data.mean(data,9)
image(d8)
image(d9)
image(d7)
image(d6)
image(d5)
image(d4)
image(d3)
image(d2)
image(d1)
image(d0)
data$label[5]
data$label[4]
v4<-lapply(data[4,],mean)
v4 <- select(data,-label)[4]
v4 <- select(data,-label)
v4 <- v4[4,]
result<-v4
result<-lapply(result,mean)
buff = c()
for(i in 1:length(result)){
buff = c(buff,as.numeric(result[i]))
}
result <- buff
result <- result/max(result)
result <- matrix(result,28,28)
result
v4<-result
image(v4)
data$label[4]
image(d4)
v4-d4
sum(v4-d4)
sum(v4-d0)
sum(v4-d1)
sum(abs(v4-d1)
)
sum(abs(v4-d4))
sum(abs(v4-d0))
sum(abs(v4-d1))
steps<-seq(0,1,by=0.1)
steps<-seq(0,1,by=0.05)
vals = c()
for(i in steps){ vals<-sum(abs(v4-i*d4)) }
plot(steps,vals)
vals = c()
for(i in steps){ vals<-c(vals,sum(abs(v4-i*d4))) }
plot(steps,vals)
head(d4)
sum(abs(v4-d4))
vals = c()
for(i in steps){ vals<-c(vals,sum(abs(v4-i*d1))) }
plot(steps,vals)
vals = c()
for(i in steps){ vals<-c(vals,sum(abs(v4-i*d2))) }
plot(steps,vals)
steps = seq(-2,2,by=0.1)
vals = c()
for(i in steps){ vals<-c(vals,sum(abs(v4-i*d4))) }
plot(steps,vals)
diff.plot <- function(v,d,i){
steps = seq(-2,2,by=0.1)
vals = c()
for(i in steps){ vals<-c(vals,sum(abs(v-i*d))) }
plot(steps,vals)
}
diff.plot <- function(v,d){
steps = seq(-2,2,by=0.1)
vals = c()
for(i in steps){ vals<-c(vals,sum(abs(v-i*d))) }
plot(steps,vals)
}
diff.plot(v4,d4)
diff.plot(v4,d5)
diff.plot(v4,d0)
diff.plot(v4,d1)
diff.plot(v4,d2)
diff.plot(v4,d3)
diff.plot(v4,d6)
diff.plot(v4,d7)
diff.plot(v4,d8)
diff.plot(v4,v4)
plot(v4)
plot(c(v4))
plot(c(d0))
plot(c(d1))
plot(c(d2))
plot(c(d3))
plot(c(d4))
plot(c(d5))
plot(c(d6))
plot(c(d7))
plot(c(d8))
plot(c(d9))
image(d4)
image(v4)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
?lattice
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?splom
?trellis.par.set
?par
?print.trellis
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
g <- ggplot(movies, aes(votes, rating))
ggplot(movies, aes(votes, rating))
head(movies)
ggplot(movies, aes(x=votes, y=rating))
?ggplot
ggplot(movies, aes(x=votes, y=rating))+geom_point()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?geom
??geom
тщышьБ-1000
nosim<-1000
n<-10
q<-matrix(rnorm(nosim*n),nosim)
q
head(q,1)
summary(q)
plot(q[1,])
plot(q)
hist(q[,1])
hist(q[,2])
hist(q[,3])
abline(0,1)
abline(1,0)
abline(2,0)
apply(q,1,mean)
sd(apply(q,1,mean))
plot(apply(q,1,mean))
hist(apply(q,1,mean))
q<-matrix(runif(nosim*n),nosim)
plot(q)
hist(q)
hist(q[1,])
hist(q[,1])
length(q[,1])
hist(q[,2])
hist(q[,3])
apply(q,1,mena)
apply(q,1,mean)
plot(apply(q,1,mean))
hist(apply(q,1,mean))
quantile(apply(q,1,mean))
summary(apply(q,1,mean))
x<-seq(0,1,by=0.05)
y<-qnorm(x,mean=0.sd=1)
y<-qnorm(x,mean=0,sd=1)
plot(x,y)
plot(x,y,type="l")
y<-qnorm(x,mean=10,sd=1)
plot(x,y,type="l")
y<-qnorm(x,mean=1,sd=1)
plot(x,y,type="l")
y<-pnorm(x,mean = 0,sd=1)
plot(x,y,type="l")
y<-rnorm(x,mean = 0,sd=1)
plot(x,y,type="l")
?qnorm
plot( function(x){ dnorm(x,log=T)}, -60,50)
plot( function(x){ dnorm(x,log=T)}, -10,10)
plot( function(x){ qnorm(x,log=T)}, -10,10)
plot( function(x){ dnorm(x)}, -60,50)
plot( function(x){ dnorm(x)}, -3,3)
plot( function(x){ qnorm(x)}, -3,3)
plot( function(x){ pnorm(x)}, -3,3)
plot( function(x){ ppois(x)}, -3,3)
plot( function(x){ ppois(x,lambda=10)}, -3,3)
plot( function(x){ ppois(x,lambda=10)}, 0,20)
plot( function(x){ dpois(x,lambda=10)}, 0,20)
plot( function(x){ qpois(x,lambda=10)}, 0,20)
plot( function(x){ rpois(x,lambda=10)}, 0,20)
plot( function(x){ ppois(x,lambda=10)}, 0,20)
plot( function(x){ pbinom(x)}, 0,20)
plot( function(x){ pbinom(x,size = 1)}, 0,20)
plot( function(x){ pbinom(x,size = 1,prob = 0.6)}, 0,20)
plot( function(x){ pbinom(x,size = 1,prob = 0.6)}, 0,1)
plot( function(x){ pbinom(x,size = 1,prob = 0.6)}, 0,2)
plot( function(x){ pbinom(x,size = 2,prob = 0.6)}, 0,2)
plot( function(x){ pbinom(x,size = 5,prob = 0.6)}, 0,2)
plot( function(x){ pbinom(x,size = 5,prob = 0.6)}, 0,10)
plot( function(x){ pbinom(x,size = 10,prob = 0.6)}, 0,10)
plot( function(x){ pbinom(x,size = 10,prob = 0.6)}, 0,20)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
plot(lm(y~x))
plot(x,lm(y~x))
plot(x,y)
abline(lm(y~x))
lm(y~x)
plot( function(x){ ppois(x,lambda=10)}, -3,3)
plot( function(x){ dnorm(x,mean = 0, sd=1)}, -60,50)
plot( function(x){ dnorm(x,mean = 0, sd=1)}, -3,3)
?pbinom
dbinom(c(0.7224), size=1, prob=0.5)
dbinom(0.7224, size=1, prob=0.5)
dbinom(0.7224, size=10, prob=0.5)
dbinom(1, size=10, prob=0.5)
dbinom(0.5, size=10, prob=0.5)
pbinom(0.5, size=10, prob=0.5)
pbinom(0.7224, size=1, prob=0.5)
pbinom(0.7224, size=2, prob=0.5)
plot( function(x){ pbinom(x,size = 1,prob = 0.5)}, 0,1)
plot( function(x){ pbinom(x,size = 2,prob = 0.5)}, 0,1)
plot( function(x){ pbinom(x,size = 2,prob = 0.5)}, 0,2)
plot( function(x){ pbinom(x,size = 1,prob = 0.5)}, 0,2)
resid(lm(y~x))
sd(resid(lm(y~x)))
summary(lm(y~x))
data(mtcars)
lm(mpg~weight, data=mtcars)
head(mtcars)
lm(mpg~wt, data=mtcars)
mean(mtcars$wt)
summary(lm(formula = mpg ~ wt, data = mtcars))
?predict
sd(lm(formula = mpg ~ wt, data = mtcars))
sd(lm(mtcars$mpg, mtcars$wt))
resid(lm(mpg~wt, data=mtcars))
x<-mtcars$wt
lm(mpg~wt,data=mtcars)
y<-37.285+mtcars$wt*(-5.344)
head(y)
sd(y)
?quantile
plot( function(x){ pnorm(x, mean=mean(y), sd=5.228877)}, -3,3)
plot( function(x){ pnorm(x, mean=mean(y), sd=5.228877)}, -5,15)
plot( function(x){ pnorm(x, mean=mean(y), sd=5.228877)}, 0,50)
abline(h=0.025)
plot( function(x){ pnorm(x, mean=mean(data$mpg), sd=5.228877)}, 0,50)
plot( function(x){ pnorm(x, mean=mean(mtcars$mpg), sd=5.228877)}, 0,50)
abline(h=0.025)
quantile(y,probs=(0.025))
quantile(data$mpg,probs=(0.025))
head(y)
quantile(mtcars$mpg,probs=(0.025))
mean(mtcars$wt)
(lm(mpg~wt,data=mtcars))
37.285-5.344*3.21725
avg_mpg <- 37.285-5.344*3.21725
plot( function(x){ pnorm(x, mean=avg_mpg, sd=5.228877)}, 0,50)
abline(h=0.025)
sd(mtcars$mpg)
plot( function(x){ pnorm(x, mean=avg_mpg, sd=6.026948)}, 0,50)
abline(h=0.025)
sd(37.285+mtcars$wt*3.21725)
plot( function(x){ pnorm(x, mean=avg_mpg, sd=3.147942)}, 0,50)
abline(h=0.025)
abline(h=0.975)
plot( function(x){ dnorm(x, mean=avg_mpg, sd=3.147942)}, 0,50)
?mtcars
?mtcars$wt
plot(mtcars$wt,mtcars$mpg)
37.285-5.344*3
plot( function(x){ pnorm(x, mean=21.253, sd=3.147942)}, 0,50)
abline(h=0.975)
(37.285-5.344*3)-(37.285-5.344*2)
plot( function(x){ pnorm(x, mean=-5.344, sd=3.147942)}, 0,50)
abline(h=0.975)
abline(h=0.025)
plot( function(x){ pnorm(x, mean=-5.344, sd=3.147942)}, -5,5)
plot( function(x){ pnorm(x, mean=-5.344, sd=3.147942)}, -10,5)
plot( function(x){ pnorm(x, mean=-5.344, sd=3.147942)}, -15,5)
plot( function(x){ pnorm(x, mean=-5.344, sd=3.147942)}, -15,0)
plot( function(x){ pnorm(x, mean=-5.344, sd=3.147942)}, -10,0)
abline(h=0.025)
plot( function(x){ pnorm(x, mean=-5.344, sd=3.147942)}, -15,0)
abline(h=0.025)
(37.285-5.344*3)-(37.285-5.344*1)
(37.285-5.344*4)-(37.285-5.344*2)
plot( function(x){ pnorm(x, mean=-10.688, sd=3.147942)}, -15,0)
abline(h=0.025)
summary(lm(mpg~wt,data=mtcars))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
resid(lm(y~x))
sum(resid(lm(y~x)))
resid(lm(y~x))^2
sum(resid(lm(y~x))^2)
resid(lm(mpg~wt,data=mtcars))
sum(resid(lm(mpg~wt,data=mtcars)))
sum(resid(lm(mpg~wt,data=mtcars))^2)
lm(mpg~wt,data=mtcars)
y1 <- 37.285+mtcars$wt
y2 <- 37.285-5.344*mtcars$wt
y2-y1
sum(y2-y1)
sum(y2-37.285)
y2-37.285
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc )
plot(mixtures$CompressiveStrength)
head(mixtures)
summary(mixtures)
q<-cut2(mixtures$FlyAsh,g=3)
plot(mixtures$CompressiveStrength,fill=q)
library(ggplot2)
qplot(mixtures$CompressiveStrength, color=mixtures$FlyAsh)
qplot(mixtures$CompressiveStrength)
qplot(1:length(mixtures$CompressiveStrength), mixtures$CompressiveStrength)
qplot(1:length(mixtures$CompressiveStrength), mixtures$CompressiveStrength, color=mixtures$FlyAsh)
qplot(1:length(mixtures$CompressiveStrength), mixtures$CompressiveStrength, color=q)
cor(mixtures$CompressiveStrength, mixtures$FlyAsh)
q<-cut2(mixtures$FlyAsh,g=5)
qplot(1:length(mixtures$CompressiveStrength), mixtures$CompressiveStrength, color=q)
head(mixtures)
qplot(mixtures$CompressiveStrength, mixtures$FlyAsh)
featurePlot(x=mixtures, y=mixtures$CompressiveStrength, plot="pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$Superplasticizer)
hist(log10(mixtures$Superplasticizer))
hist(mixtures$Superplasticizer)
summary(mixtures$Superplasticizer)
str(mixtures$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
library(gdata)
startsWith(str = names(training), pattern = "IL_")
names(training)[startsWith(str = names(training), pattern = "IL_")]
n<-names(training)[startsWith(str = names(training), pattern = "IL_")]
mini.training <- training[,n]
head(mini.training)
prcomp(mini.training)
m<-abs(cor(mini.training))
diag(m)<-0
which(m>0.8,arr.ind = T)
which(m>0.5,arr.ind = T)
which(m>0.5)
which(m>0.5,arr.ind = T)
which(m>0.6,arr.ind = T)
which(m>0.7,arr.ind = T)
pr.comp <- prcomp(mini.training)
preProc<-preProcess(mini.training, method = "pca",pcaComp = 5)
preProc
summary(preProc)
preProc$mean
preProc$std
train.pc<-predict(preProc,mini.training)
summary(train.pc)
model.fit<-train(mini.training, method="glm",data=train.pc)
model.fit<-train(mini.training$IL_11, method="glm",data=train.pc)
model.fit<-train(mini.training$IL_11~., method="glm",data=train.pc)
summary(model.fit)
mini.testing <- testing[,n]
head(mini.testing)
confusionMatrix(mini.testing, predict(model.fit, test.pc))
confusionMatrix(mini.testing$IL_11, predict(model.fit, test.pc))
test.pc<-predict(preProc, mini.testing)
confusionMatrix(mini.testing$IL_11, predict(model.fit, test.pc))
confusionMatrix(mini.testing, predict(model.fit, test.pc))
preProc<-preProcess(mini.training, method="pca",pcaComp=5)
trainPC<-predict(preProc, mini.training)
modelFit<-train(mini.testing~.,method="glm",data=trainPC)
modelFit<-train(mini.testing$IL_11~.,method="glm",data=trainPC)
modelFit<-train(mini.training$IL_11~.,method="glm",data=trainPC)
testPC<-predict(preProc,mini.testing)
confusionMatrix(mini.testing$IL_11, predict(modelFit,testPC))
confusionMatrix(mini.testing, predict(modelFit,testPC))
testPC
modelFit
preProc<-preProcess(mini.training, method="pca",pcaComp=9)
trainPC<-predict(preProc, mini.training)
modelFit<-train(mini.training$IL_11~.,method="glm",data=trainPC)
modelFit
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
n<-names(training)[startsWith(str = names(training), pattern = "IL_") | startsWith(str = names(training), pattern = "diagnosis")]
n
mini.training <- training[,n]
mini.testing<-testing[,n]
preProc1<-preProcess(mini.training)
head(mini.training)
mini.training$diagnosis<-factor(x = mini.training$diagnosis)
str(mini.training)
mini.testing$diagnosis<-factor(x = mini.testing$diagnosis)
str(mini.testing)
preProc1<-preProcess(mini.training)
model1<-train(diagnosis~.,data=mini.training,preProcess=c("center","scale"),method="glm")
summary(model1)
summary(model1$finalModel)
preproc2<-preProcess(mini.training, method="pca",thresh = 0.8)
preproc2<-preProcess(mini.training, method="pca",pcaComp = 2)
mini.testing$diagnosis<-as.character(mini.testing$diagnosis)
mini.testing$diagnosis<-as.numeric(mini.testing$diagnosis)
str(mini.testing)
mini.testing<-testing[,n]
preproc2<-preProcess(mini.training, method="pca",thresh = 0.8)
preproc2<-preProcess(mini.training[-diagnosis], method="pca",thresh = 0.8)
preproc2<-preProcess(mini.training[,-c("diagnosis")], method="pca",thresh = 0.8)
preproc2<-preProcess(mini.training[,c(-"diagnosis")], method="pca",thresh = 0.8)
preproc2<-preProcess(mini.training, method="pca",thresh = 0.8)
summary(mini.training$diagnosis)
mini.training$diagnosis<-factor(mini.training$diagnosis)
mini.training$diagnosis<-as.numeric(mini.training$diagnosis)
str(mini.training$diagnosis)
preproc2<-preProcess(mini.training, method="pca",thresh = 0.8)
trainpc2<-predict(preproc2,mini.training)
model2<-train(mini.training$diagnosis~.,method="glm",data=trainpc2)
summary(model2)
summary(model1)
model1<-train(diagnosis~.,data=mini.training,preProcess=c("center","scale"),method="glm")
summary(model1)
mini.testing$diagnosis<-factor(mini.testing$diagnosis)
mini.testing$diagnosis<-as.numeric(mini.testing$diagnosis)
confusionMatrix(mini.testing$diagnosis, model1)
confusionMatrix(mini.testing$diagnosis, predict(model1,mini.testing))
confusionMatrix(mini.testing$diagnosis, predict(model1,mini.testing$diagnosis))
test2<-predict(preproc2, mini.testing)
confusionMatrix(mini.testing$diagnosis, predict(model2,test2))
confusionMatrix(mini.testing, predict(model2,test2))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
x<-1:133
```{r, results = 'hide'}
getwd()
setwd("~/R_coursera/Getting_and_Cleaning_Data/course_project_1/")
dir(filename)
filename = "getdata-projectfiles-UCI HAR Dataset"
dir(filename)
!dir(filename)
dir()
filename %in% dir()
